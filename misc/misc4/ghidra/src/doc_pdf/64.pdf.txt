Functions

Functions 1/7

Functions store information ab
out locations within a program
 that may be referenced by a c
all instruction, although no
direct reference to a function
 is required. External Functio
ns may also be defined and ass
ociated with a Library
Namespace. A function definiti
on consists of:
An entry point address or exte
rnal location symbol
A body of instructions (does n
ot apply to External Functions
)
A function signature/prototype
 specification, consisting of:
1.
2.
3.
4.

Function Name (same as primary
 label at entry point)
Calling Convention (available 
conventions defined by active 
compiler-spec)
Return data type (with storage
)
Parameter arguments (with stor
age)

Optional function attributes, 
including:
1. Varargs enablement
2. No-Return enablement (if en
abled, calls to function will 
not return and can prevent fal
lthrough from
call)
3. Inline enablement (if enabl
ed, callers will inline functi
on code)
4. Custom Storage enablement (
if enabled, return and paramet
er storage to be explicitly de
fined)
5. Call Fixup
Additional function listing ma
rkup (does not apply to Extern
al Functions):
1.
2.
3.
4.
5.
6.

Local variables (with storage)
Parameter and local variable r
eferences from instructions
Code and data references from 
instructions
Comments
Optional function repeatable c
omment
Function Tags

When displayed in the browser,
 a function includes:
The entry point is usually cal
led by another instruction, al
though there may be no direct 
reference to the
function within the program. T
he entry point of a function m
ust be an instruction.
The body of the function is un
der user control, but can be a
utomatically calculated when t
he function is
defined. The body can be a con
tiguous range of addresses or 
may be multiple address ranges
. Data may also
be included within the body.
The complete function signatur
e and optional attributes are 
displayed within the listing a
t the function entry
point. This information may al
so be displayed at pointers wh
ich reference a function provi
ded the appropriate
tool option for displaying fun
ction headers is enabled (see 
Listing Fields options / Funct
ion Pointers).

Function Signature, Attributes
 and Variables
Please refer to Function Signa
ture and Variables for details
 on this subject and how to mo
dify a function
signature/prototype specificat
ion, including function attrib
utes and variable storage.

Create Function
Create Function creates a func
tion with an entry point and a
 body of instructions.

To Create a Function,

Functions 2/7

1. Place the cursor in the Cod
e Browser at the address with 
a defined instruction.
2. Right-mouse-click, select t
he Create Function popup menu 
item

As part of creating a function
, function parameters and loca
l variables may also be create
d. See
Variables for the operations o
n variables.
Functions may be automatically
 created via Auto Analysis.
If a function starts with an u
nconditional jump instruction,
 the function will be created 
as a Thunk
Function if possible.
The entry point for the functi
on is the address at the curre
nt cursor location when there 
is no selection. With a
selection, the entry point is 
the minimum address in the sel
ection.
The current code browser selec
tion is used as the function b
ody. In the absence of a selec
tion, Create Function will
follow the control flow from t
he entry point to determine th
e function body. The resulting
 code may not be
contiguous.

To see the body of the functio
n that has been defined, place
 the cursor on the first instr
uction
within the function and choose
 Select
Functions from the Code Browse
r's main menu.
The symbol at the entry point 
is used as the name of the fun
ction. If no symbol exists at 
the entry point a default
label starting with FUN_ is cr
eated. Prior to creating the f
unction, the symbol may have s
tarted with SUB_ if it was
a default symbol and there wer
e call references to it. If a 
symbol does exist at the entry
, a dialog is displayed so tha
t
you can change the suggested f
unction name, FUN_ <address>. 
After the function is created,
 a symbol is created
with the name from the dialog.
If the symbol name is changed,
 the function name displayed w
ill also change. Rename Functi
on can be used to
rename the function.
In stack-based processors, Cre
ate Function will try to ident
ify parameters and local varia
bles used by the function.
By default, the variables data
 type will be UndefinedN where
 N is the size (in bytes) of t
he stack reference. See
Function Signature and Variabl
es on how to modify the stack 
variables. See Stack Reference
s on how to add stack
variables.
Select
Subroutines will display the s
cope of a subroutine from any 
address within the scope of th
e subroutine. It
is helpful to use the Subrouti
nes option to determine what t
he potential scope of a functi
on would be if you create
it.

Re-Create Function
Re Create Function rebuilds a 
function's body of addresses w
ithout destroying any paramete
rs or stack references
that may have already been cre
ated. This action is useful wh
en additional code has been fo
und, for example from a
computed jump (or switch), tha
t was not know when the origin
al function was created. Most 
likely auto-analysis
will have fixed the function's
 body already and re-creating 
the function won't be necessar
y.
With no selection, the functio
n's body is re-calculated base
d on the flow of the instructi
ons from the function's entry
point address. With a selectio
n, the body of the function is
 set to the current selection.
To Re Create a Function,

To Re Create a Function,

Functions 3/7

1. Place the cursor in the Cod
e Browser at the top of an alr
eady defined function.
The cursor can be on any field
 at the entry point of the fun
ction.
2. Right-mouse-click, select t
he Function Re-create Function
 popup menu item
To Re Create a Function, with 
a forced new body
1. Create a selection in the C
ode Browser that should be the
 body of the function. The cur
sor should be at the
top of the already defined fun
ction.
The cursor can be on any field
 at the entry point of the fun
ction.
2. Right-mouse-click, select t
he Function Re-create Function
 popup menu item

Recreating a function will kic
k off auto-analysis on the fun
ction if there are any changes
 to the
function's body. New parameter
s or locals may be created sin
ce more code may now be part o
f the
function's body. See Variables
 for the operations on variabl
es.

Thunk Functions
Thunk Functions are a common a
rtifact of compiled code and a
re frequently used to facilita
te access to external
functions, functions located f
ar from the caller, and other 
relocation scenarios. Ghidra h
as the ability to specify a
function as being a thunk for 
another function. A thunk has 
the same function signature an
d parameter storage as the
real function (also referred t
o as the thunked-function), al
though its name may differ. A 
thunk function within
Ghidra acts as a proxy to the 
real/thunked-function where al
l parameter and attribute chan
ges to one are reflected
onto the other. One exception 
to this is the name. If a thun
k is created without a name, i
ts name will reflect the name
of the thunked function. Renam
ing the thunk allows the thunk
 to have a name which differs 
from the
thunked-function. Local variab
les are not supported for thun
k functions.
Within the Code Browser, doubl
e-clicking on a thunk function
 name will navigate to the ass
ociated thunked
function, while thunked functi
ons will display back-referenc
es (i.e., XREFs) to the associ
ated thunk functions with a
Ref-Type of 'T'.
To Create a Thunk-Function:
1. Select the instructions whi
ch corresponds to the body of 
the new thunk function, or pla
ce your cursor on a
single unconditional jump inst
ruction which jumps to the thu
nked-function.
2. Right-mouse-click, select t
he Create Thunk Function popup
 menu item
3. If unable to determine the 
thunked-function, the user wil
l be prompted to specify the t
hunked-function by
label or address. The specifie
d location must correspond to 
an existing function.
To Edit a Thunk Function (i.e.
, set the associated thunked f
unction) or Convert a normal F
unction to a Thunk
Function:
1. Place the cursor in the Cod
e Browser at the top of an alr
eady defined thunk function.
The cursor can be on any field
 at the entry point of the fun
ction.
2. Right-mouse-click, select t
he Function Set Thunked Functi
on... popup menu item
3. The user will be prompted t
o specify the thunked function
 by label or address. The spec
ified location must
correspond to an existing func
tion.
To Revert a Thunk Function (i.
e., revert a Thunk Function to
 a normal Function):
1. Place the cursor in the Cod
e Browser at the top of an alr
eady defined thunk function.
The cursor can be on any field
 at the entry point of the fun
ction.
2. Right-mouse-click, select t
he Function Revert Thunk Funct
ion... popup menu item

1.
The cursor can be on any field
 at the entry point of the fun
ction.
2. Right-mouse-click, select t
he Function Revert Thunk Funct
ion... popup menu item
3. The user will be prompted t
o confirm the action.

Functions 4/7

External Functions
Defining an External Function 
allows a function to be define
d which does not reside within
 the current program
listing or whose actual memory
 address is unknown. Similar t
o a simple External Location, 
these external symbols
are associated with named Libr
ary namespaces and are most ea
sily managed via the Symbol Ta
ble or Symbol Tree
under the Imports category. If
 the actual Library name is un
known, the "<EXTERNAL>" Librar
y (or any other
named Library) may be used as 
a parent namespace.
From either the Symbol Table o
r Symbol Tree, an existing Ext
ernal Location may be converte
d to a function using
the Create External Function p
opup action on the selected no
de. The resulting External Fun
ction may be converted
back to a simple External Loca
tion by deleting the function 
node. To really remove the fun
ction and its location will
require a second delete on the
 External Location.
From either the Symbol Table o
r Symbol Tree, an existing Ext
ernal Function may be modified
 using the
Function Edit Function... popu
p action on the selected funct
ion node.
Creating an External Reference
 is currently the only mechani
sm within the Ghidra GUI to es
tablish an External
Location. Once an External Loc
ation has been established, it
 can be converted to a functio
n (see above). This
limitation should hopefully be
 resolved in a future release 
of Ghidra.

Create Multiple Functions
Create Multiple Functions crea
tes functions from a selection
 in the listing. It works from
 the minimum address to
the maximum address in the sel
ection trying to create functi
ons if possible. Any addresses
 that are already part of a
function are discarded and not
 used to determine new functio
ns. Also whenever a function i
s created by this action,
all the addresses in the body 
of the created function are al
so discarded from being possib
le addresses for starting a
new function.
A common use of this action is
 on a selection containing the
 entry point addresses of the 
functions you want to
create.

Edit Function
For information on editing fun
ctions, see Function Signature
 Help.

Rename Function
Rename Function renames an exi
sting function. As discussed i
n Create Function, the functio
n name is the same as
the primary label at the funct
ions entry point.
To rename a function,
1. Right-mouse-click on the fu
nction header in the Code Brow
ser
2. Select the Function Rename 
Function popup menu item
3. Enter the new function name
 and/or namespace, click OK. T
he name may also be entered wi
th a fully
qualified namespace (e.g., myn
amespace::myfunction). The '::
' is used as a namespace delim
iter.

Delete Function

Functions 5/7

Delete Function removes a func
tion. There is no confirmation
 for the Delete Function opera
tion. However, the
results can be undone using th
e Undo operation.
When a function is deleted all
 stack variable definitions ar
e removed, along with all refe
rences to those variables
from instructions within the f
unction's body. If a stack ref
erence refers to a stack varia
ble that is deleted, any
references will be replaced wi
th Stack [offset], where offse
t is the relative offset to th
e stack.
To Delete a Function,
1. Right mouse-click on the fu
nction header
2. Select the Function Delete 
Function popup menu item
When a function is deleted, al
l stack and register reference
s from instructions within the
 function body are removed.
The function comment (which is
 really the plate comment for 
that address) remains intact i
f you had made changes
to it, or if the plate comment
 existed before the function w
as created.
If there are still call refere
nces to this address, the labe
l changes from FUN_ to SUB_ .

Function Purge
A function purge is the number
 of additional bytes (not incl
uding the return value) a func
tion pops from the stack
when it returns. The value is 
calculated as the difference b
etween the stack pointer's val
ue exiting the function and
its value coming into the func
tion but excludes the final po
p of the return address.
For most calling conventions, 
the function purge is always z
ero. A major exception is the 
32-bit x86 stdcall calling
convention, where the function
 may pop off its own stack par
ameters in addition to the ret
urn value. The function
purge in this situation can be
 positive indicating that more
 values are popped from the st
ack. For other unusual
situations, a negative functio
n purge can be set indicating 
that the function pushes addit
ional values.
For architectures where the st
ack grows in the positive dire
ction, the meaning of the func
tion purge sign is reversed.
A positive function purge indi
cates additional bytes are pus
hed to the stack, and a negati
ve function purge indicates
bytes are popped from the stac
k.
To change the function purge:
Right mouse-click on the funct
ion header
Select the Function Edit Funct
ion Purge... popup menu item
Enter the new function purge s
ize in the dialog that appears

Function Repeatable Comment
When a repeatable comment exis
ts at the entry point of a fun
ction, the repeatable comment 
is displayed in the
Function Repeatable Comment fi
eld rather than the EOL Commen
t field. See Edit Comments for
 more information
on comments.

Stack Depth Change
You can specify a relative cha
nge in the stack depth at the 
address of the current locatio
n in the program.

Set Stack Depth Change

Functions 6/7

To set a change in stack depth
:
Right mouse-click on the Listi
ng.
Select Set Stack Depth Change.
.. from the popup menu.
The Set Stack Depth Change dia
log is displayed. The Stack De
pth Change textfield initially
 contains the
current stack depth change val
ue. If the stack depth change 
is not explicitly set at this 
address, the default
value will be based on the ins
truction. For a call instructi
on, the default stack depth ch
ange will be based on
the function purge value of th
e called function.

Enter the desired change in st
ack depth. This can be either 
decimal or hexadecimal. Hexade
cimal is indicated
by a "0x". For example, -0x1a.
Press the Return key or the OK
 button to set the stack depth
 change.
If you are not on a Call instr
uction, the stack depth change
 will be set.
Otherwise, you will you will s
ee a dialog allowing you to ch
oose whether the value should 
be applied as a
stack depth change at the curr
ent address (Local) or as a fu
nction purge at the called fun
ction (Global).
Choose Local to set the stack 
depth change or Global to set 
the function purge.

Remove Stack Depth Change
To remove a change in stack de
pth where it is currently set:
Put the cursor location on the
 StackDepth = StackDepth + ...
 line in the Listing.
Press the Delete key.
or
Right mouse-click on the Stack
Depth = StackDepth + ... line 
in the Listing.
Select Remove Stack Depth Chan
ge from the popup menu.

Provided By: Functions plugin
Related Topics:
Function Signature and Variabl
es
Auto Analysis
Stack References
Comments

Functions 7/7

