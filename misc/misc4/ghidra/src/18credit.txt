Variables 1/8

Function Signature, Attributes
 and Variables
Function Signature
A function's signature conveys
 the following information abo
ut a function:
1.
2.
3.
4.

The compiler-specific named ca
lling convention
The function's return data typ
e (void indicates no return va
lue)
The function's name
Ordered list of named paramete
rs and associated data types.

Function Attributes
The following function attribu
tes affect disassembly and sem
antic analysis and may be set 
via the Edit Function dialog.
Custom Storage
The Custom Storage option, if 
enabled, provides the ability 
to explicitly specify return/p
arameter storage. By default,
storage will be dynamically co
mputed based upon calling conv
ention and return/parameter da
ta types. When dynamic
storage is computed, hidden "a
uto-parameters" may be injecte
d as well as the use of "force
d-indirect" storage.
Inline
Any Inline function called by 
another function may be treate
d as inline code instead of a 
function call during analysis.
No Return
While a typical function call 
is always assumed to return an
d continue flowing to the next
 instruction, marking a functi
on
as No Return forces an implied
 return immediately following 
a call to such a function. Dep
ending upon the state of
disassembly, marking a functio
n as No Return may help to pre
vent a call to such a function
 from falling-thru to the next
instruction during disassembly
. If disassembly has already b
een done and the fall-thru has
 been improperly disassembled,
the Clear Flow and Repair acti
on may be used to cleanup the 
bad fall-through.
Varargs
Designated by a trailing '...'
 in the function signature, in
dicates that a variable number
 of parameters is allowed. Com
mon
C functions which employ Varar
gs are printf and scanf.
Call-Fixup
A function may be tagged with 
a predefined Call-Fixup which 
can be used to alter/simplify 
the semantic effect of calling
such a function. The available
 set of predefined call-fixups
 are defined within the compil
er specification (*.cspec file
)
associated with a program. Thi
s feature is typically used wh
en the effects of calling a we
ll-known function need to be
simplified so that the caller 
can be more easily analyzed an
d/or understood.

Variables
There are two classes of funct
ion variables: Parameters and 
Local Variables. The term Para
meter also includes the Functi
on

There are two classes of func
tion variables: Parameters and
 Local Variables. The term Par
ameter also includes the Funct
ion
Variables 2/8
return value which has an asso
ciated data type and storage b
ut has no ordinal.
Many processors use a stack as
 part of their calling convent
ions and/or for local variable
 storage. In some cases, the r
eturn
address is pushed onto the sta
ck during the call operation. 
Any references to the stack (e
.g., references and variable s
torage) are
relative to the stack pointer 
when the function is entered. 
For a negative growing stack (
like the X86 processor), the s
tack would
look something like this:
-n
...
Local Variables
...
Saved Registers
Return Address
Parameter 1
...
Parameters
n
Structures, Unions, and Arrays
 can be used to define variabl
es as well as the built in pri
mitive data types. To define s
tructures,
see Data Structure Editor
Parameters (includes Function 
Return)
Storage for return/parameters 
can be computed dynamically ba
sed upon the associated callin
g convention and data types (i
.e.,
complete function signature). 
The ability to properly comput
e the correct storage is limit
ed by the current capabilities
 of the
function prototype models and 
Decompiler within Ghidra. In s
ome cases it will be necessary
 to enable Custom Storage for 
a
function and specify the corre
ct storage locations for the r
eturn/parameters including the
 ability to join multiple stor
age elements
(i.e., varnodes) for a single 
parameter.
When parameter storage is dete
rmined dynamically, the callin
g convention may dictate the u
se of hidden parameters which 
we
refer to as "auto-parameters" 
(auto). In addition, the "forc
ed-indirect" (ptr) condition m
ay be imposed on parameters wh
en
large data is forced to be pas
sed by reference. When either 
of these is in use for the ret
urn or parameters, the (auto) 
or (ptr)
designation will appear with t
he storage location displayed 
for each parameter. The parame
ter names 'this' and
'__return_storage_ptr__' are r
eserved for the two supported 
auto-parameter cases. The 'thi
s' auto-parameter is imposed b
y the
__thiscall calling convention,
 while forced-indirect is impo
sed by certain calling convent
ions which limit the maximum s
ize of
any parameter passed by value.
 If forced-indirect is imposed
 on the return storage, the '_
_return_storage_ptr__'
auto-parameter will be imposed
 to allow the function caller 
to specify a pointer to the fu
ll return storage data locatio
n. When
using custom storage, it is as
sumed any auto-parameters will
 be explicitly defined as norm
al parameters if applicable. W
ithin the
Program API, auto-parameters m
ay not be directly manipulated
 and are immutable.
The Function Editor is the mos
t affective means of modifying
 the function signature either
 via the Code Browser listing 
or
within the Decompiler
Local Variables

Currently, there is no specifi
c user interface action for cr
eating Local Variables. Stack 
and register variables will
be created automatically when 
a suitable stack or register r
eference is created via the us
er interface. Additionally, th
e
Decompiler's commit actions wi
ll create Local Variables as n
eeded. They can also be create
d programmatically.
In addition to register and st
ack locations, Local Variables
 also have the ability to be d
efined by the Decompiler to re
flect
temporary storage identified b
y a hash value. Please note th
at these hash type variables c
an sometimes not work as expec
ted
within the Decompiler. In addi
tion, the scope of a local reg
ister variable is determined b
y its first-use-offset which r
eflects the
instruction offset relative to
 the function entry point at w
hich the variable is first wri
tten. The variable will remain
 in scope from
that point forward until anoth
er local variable comes into s
cope for the same storage loca
tion. Local stack variables as
sume a
first-use-offset of zero (0).

Define Variable Data Type or 
Function Return Type

Variables 3/8

Variables can be annotated wit
h one of the built in or user 
defined data types. The undefi
ned or previously defined
variable will be redefined to 
the new data type.
Variable data types, including
 parameters and return, can be
 defined one of four ways:
Using right-mouse-click on the
 return type or a parameter wi
thin a function signature disp
layed within the listing.
1. Right mouse click on the re
turn type or parameter within 
the function signature
2. If the cursor is over the r
eturn type, Select Set Data Ty
pe
; if the cursor is over a para
meter, select
Set Data Type
The pull right menu lists data
 types that you have marked as
 "favorites."
After you apply a data type, t
his becomes your most recently
 used data type and is shown o
n
the menu with the 'Y' as the "
hot key."

Using right-mouse-click on a p
arameter, <RETURN> or local va
riable listed within the funct
ion variable listing
1. Right mouse click on a para
meter, <RETURN> or local varia
ble
2. Select Set Data Type
The pull right menu lists data
 types that you have marked as
 "favorites."
After you apply a data type, t
his becomes your most recently
 used data type and is shown o
n
the menu with the 'Y' as the "
hot key."

Using the Data Type Manager wi
ndow (drag and drop)
1. From the Code Browser tool 
bar select Display Data Types
icon
2. In the Data Type Manager wi
ndow select the appropriate da
ta type
3. Drag and Drop the data type
 onto the target parameter, <R
ETURN> or local variable in th
e Code
Browser
Assigned Quick key,
Place the cursor on the target
 parameter, <RETURN> or local 
variable
Press a quick key set to speci
fy a data type (i.e., "b"-byte
, "p"-pointer, ...)

Edit Function
Once a function has been creat
ed, there are many attributes 
of the function and its parame
ters that can be changed. The
Function Editor Dialog allows 
you to make those changes. To 
edit a function do the followi
ng:
1.
2.
3.
4.

Place the cursor on a function
 signature
Right-mouse-click, and select 
Edit Function.
Edit any attributes of the fun
ction using the dialog.
Press OK to save your changes.

Variables 4/8

Function Signature Field
The area at the top of the dia
log is used to show the comple
te function signature. It will
 update as you make changes to
 the
various fields in the dialog.
You may also use this field to
 directly edit the signature, 
but beware that your changes w
ill have to be parsed and the
current parser is severely lim
ited. Once you make a change i
n this field, all the other fi
elds will be disabled temporar
ily
until you complete your change
s and press either <TAB> or <R
ETURN> to continue. You may al
so complete the edit by
clicking outside of the signat
ure field.
If the parser fails to success
fully parse your changed signa
ture field, a dialog will appe
ar giving you the option to co
ntinue
typing in the field or abortin
g your edits in that field.

Due to limitations in the pars
er, there are many function si
gnatures that Ghidra supports 
that you cannot
directly enter by typing in th
e function signature field. Fo
r example, you cannot use the 
signature field to enter
templated types. Also, the par
ser currently only supports co
mmon datatypes and datatypes t
hat are currently
used in your program. To enter
 more complicated values or fi
nd datatypes from open archive
s, use the more
precise controls that the dial
og provides.
Function Name
This text field can be used to
 change the name of the functi
on.
Calling Convention

Calling Convention

Variables 5/8

This field is a combobox that 
allows you to choose a calling
 convention from the list of k
nown calling conventions for t
his
processor and compiler specifi
cation. This choice will have 
no affect on storage if the Cu
stom Storage checkbox has been
selected.
Function Attributes
This sections contains a set o
f miscellaneous checkboxes tha
t affect the function.
Varargs - sets the function to
 have a variable number of arg
uments.
In Line - indicates this funct
ions code is placed in line wi
th the calling function.
No Return - used to indicate i
f this function does not retur
n.
Use Custom Storage - If select
ed, the user can edit and chan
ge the storage of the return v
alue and the parameters.
Otherwise, the storage is dete
remind by the selected calling
 convention.

Parameters/Return Type Table
The parameters/return type tab
le allows the user to add or r
emove parameters as well as ch
anging their names and
datatypes. It also displays th
e return value datatype and st
orage. Also, if the Use Custom
 Storage checkbox is selected,
 the
storage of the parameters and 
return type can be changed.
Table fields
Index - indicates its ordinal 
position in the signature (sta
rts with 1). This field can't 
be edited directly, but can be
affected by the Up and Down bu
ttons. Note: this field is bla
nk for the return value.
Datatype - indicates the datat
ype of the parameter or return
 type. Clicking on this field 
will bring up a DataType
Chooser Dialog.
Name - the name of the paramet
er. This field can be edited d
irectly in the table cell. Not
e: the name of the "return
value" is <RETURN> and can't b
e changed.
Storage - the storage for the 
parameter or return value. If 
the Use Custom Storage checkbo
x is selected, this field
can be edited by clicking on i
t and bringing up the paramete
r editor dialog. If not using 
custom storage,
auto-parameters or forced-indi
rect storage may be imposed as
 determined by the selected ca
lling convention and is
designated by (auto) or (ptr) 
with the displayed computed st
orage.

Table Buttons
Add - Adds a new parameter to 
the function
Remove - Removes the selected 
row (parameter) from the table
.
Up - Moves the selected parame
ter earlier in the signature.
Down - Moves the selected para
meter later in the signature.

Call Fixup
This field is a combobox that 
allows use to use a predefined
 Call-Fixup. A function may be
 tagged with a predefined
Call-Fixup which can be used t
o alter/simplify the semantic 
effect of calling such a funct
ion. The available set of
predefined Call-Fixups are def
ined within the compiler speci
fication (*.cspec file) associ
ated with a program. This feat
ure
is typically used when the eff
ects of calling a well-known f
unction need to be simplified 
so that the caller can be more
easily analyzed and/or underst
ood.

Edit Parameter Storage Dialog

This dialog is invoked by cli
cking on the storage column in
 the Edit Function dialog. Thi
s dialog allows your to precis
ely
Variables
specify the storage of a param
eter. The parameter can even b
e divided amongst multiple sto
rage locations. Each row
of the 6/8
table specifies a storage loca
tion used by the parameter.

Size Information
The top of the dialog shows tw
o sizes. The Datatype size is 
the size required to store the
 parameter based on its curren
t
datatype. The Allocated Size s
hows how much storage as been 
allocated based on the rows in
 the table.
Storage Table
A table of storage locations w
here each row represents a sto
rage location. You must add en
ough storage location rows to
get enough storage space for t
he size of the parameters data
type.
Table Columns
Type - the type of storage. Ca
n be either Stack, Register, o
r Memory. Clicking on the fiel
d will bring
up a table version of a combo-
box.
Location - Indicates the speci
fic location for the type. For
 stack, it will be an integer 
offset. For
register, it will be the name 
of the register. For memory, i
t will be the address. Clickin
g on this field
will bring up an editor approp
riate for the storage type.
Size - The size for this stora
ge. For stack and memory, it w
ill be the number of consecuti
ve bytes to use
for this storage. For a regist
er, it will the number of byte
s to use within the register, 
up to the size of the
register.

Table Buttons
Add - Adds a new storage locat
ion
Remove - Removes the selected 
row (storage location) from th
e table.
Up - Moves the selected storag
e location earlier in the allo
cation.
Down - Moves the selected stor
age location later in the allo
cation.

Down - Moves the selected sto
rage location later in the all
ocation.

Variables 7/8

Create Function Definition
Once you have defined a functi
on, you can make a function si
gnature definition which is a 
new data type that can be
applied to another function so
 that it has the same signatur
e. The data type appears under
 the program node in the Manag
e
Data Types window.
To create a function definitio
n, position the cursor on a fu
nction signature, right mouse 
click and select Create Functi
on
Definition.
A new data type is created; th
e name of the data type is the
 same name as the function.
To create a new function signa
ture definition using the one 
you created, drag the data typ
e from the Data Type Manager
window and drop it on the exis
ting function where you want t
he new function signature to b
e created.
If you attempt to create a fun
ction definition on one that y
ou have already defined, nothi
ng happens.

Rename Variable
Rename Variable will change th
e name of a variable from its 
default name to a user-defined
 name.
To Rename a Variable,
1. Place the cursor on the tar
get variable within the functi
on variable listing
2. Right-mouse-click, select F
unction Variables Rename Param
eter... or Function Variables
Variable...
3. Type the new variable name 
in the dialog and press<Enter>
, OR click on the OK button

Rename Local

Delete Variable
Delete Variable will remove th
e target variable from the lis
ting. There is no confirmation
 with Delete Variable.
However, the operation can be 
undone using the Undo operatio
n.
To delete a variable,
1. Place the cursor on the tar
get variable within the functi
on variable listing
2. Right-mouse-click, select F
unction Variables Delete Param
eter or Function Variables
Variable

Delete Local

Edit Comment
Stack Parameters and Local var
iables can have comments assoc
iated with them. The comment i
s free form text. If a
comment already exists, the co
mment is modified.
To add/edit a comment to a var
iable,
1.
2.
3.
4.

Place the cursor on the target
 variable
Right-mouse-click, select Edit
 Comment
Enter the comment.
Select OK

Remove Comment

Variables 8/8

To remove a function variable 
comment,
1. Place the cursor on the var
iable comment
2. Hit the <Delete> key

Recently Used Data Type
The data menu shows an option 
for the data type that was mos
t recently used. By default, t
he "hot key" assigned to this 
option is
'y,' however, you can change t
he key assignment through the 
key bindings panel on the Edit
 Options dialog.

Provided By: Function Plugin
Related Topics:
Data Structure Editor
Data Type Manager
Functions

Function Tag Window

Function Tag Window 1/3

The Function Tag window provid
es a list of function tags def
ined in the currently open pro
gram. It will also show which 
tags
are assigned to the currently-
selected function. Tags may be
 created by the user, or loade
d from a predefined set (see s
ection on
loading tags below).
To display the Function Tag wi
ndow, select the Window Functi
on Tags option on the tool men
u. Optionally, the dialog
may be activated by right-clic
king on a function header in t
he listing and selecting the E
dit Function Tags option.

Window Components
This window has five distinct 
sections:
Available Tags List: Displays 
all tags that are available to
 assign to the current functio
n.
Assigned Tags List: Displays a
ll tags that have been assigne
d to the current function.
Tag Input Field: Allows users 
to create new tags. Multiple t
ags may be created at one time
.

Filter Field: Allows users to 
filter what is shown in the Av
ailable and Assigned tag lists
.

Action Buttons
Assigns the selected tag(s) to
 the current function
Removes the selected tag(s) fr
om the current function
Deletes the selected tag(s) fr
om the program and removes the
m from all functions

Tag Operations

Create

Tags can be created by using 
the Tag Input Field described 
above. Users may enter multipl
e tag names
delimited by a comma. All newl
y-created tags will be display
ed in the Available Tags List 
and Function
are NOT Tag Window 2/3
assigned to any function.
Each tag may have an associate
d comment that is visible as a
 tooltip. This can be assigned
 after the tag
has been created (see edit sec
tion below).
Delete
Tags may deleted by selecting 
a set of tags and pressing the
following:

icon. Users will be prompted w
ith the

If confirmed, the tag will be 
removed from the system and fr
om all functions to which it h
ad been assigned.
Edit
Tag names and comments may be 
edited by double-clicking the 
item in the list. If the tag i
s not editable the
user will be presented with th
e following warning:

.
If editing is allowed, the fol
lowing dialog will be shown:

Add to Function
Tags may be added to a functio
n by selecting a set of tags a
nd pressing the
removed from the Available Tag
s List and added to the Assign
ed Tags List.

button. The tags will be

Remove from Function
Tags may be removed from a fun
ction by selecting a set of ta
gs and pressing the
removed from the Assigned Tags
 List and added to the Availab
le Tags List.

Function Tag Window 3/3
button. The tags will be

Loading External Tags
Tags may be loaded on startup 
from an external source if des
ired. These will be shown in b
lue and cannot be edited or
deleted, with one caveat: once
 a tag has been assigned to a 
function it ceases to have any
 special protections and can b
e
edited/deleted just as any oth
er.
To make these available there 
must be a file named functionT
ags.xml available on the class
path. Edit (or create) this fi
le
and add tags as needed. The fo
rmat is as-follows:
<tags>
<tag>
<name>TAG1</name>
<comment>tag comment</comment>
</tag>
<tag>
<name>TAG2</name>
<comment>tag comment</comment>
</tag>
</tags>

Be aware that any external tag
s that have removed/edited wil
l reappear with Ghidra is rest
arted, as these are always
loaded from this file.

Provided By: FunctionTagPlugin
Related Topics:
Functions

Register Values

Register Values Plugin 1/4

Each program has a set of regi
sters that is determined by th
e program's language. When a p
rogram is actually running, th
e
registers contain values that 
make up the processor state at
 any given instant. Since Ghid
ra programs represent a static
 view (i.e.
not running), there is no "ins
tant" that can be examined to 
see register values. The best 
approximation is to assign reg
isters
values at addresses. This is u
seful if the register value ca
n be determined to be constant
 anytime the instruction at th
at address is
executed.
For example, if an instruction
 at address 0x1000 is "mov ax,
20", then it might be possible
 to assume that the value of r
egister ax
will be 20 for the next severa
l instructions (assuming there
 are no "jumps" into that code
).
Setting register values can so
metimes be the critical link f
or successfully performing var
ious types of analysis or even
 getting the
correct disassembly. For examp
le, some processors have a "mo
de" that is stored in some reg
ister. Depending on the mode, 
the
processor may have completely 
different instruction sets. To
 disassemble properly, the mod
e register must be set at the 
address
where the disassembly begins.

Register Manager
The Register Manager displays 
the assigned values of registe
rs at addresses within a progr
am.
To display the Register Manage
r, select the Register Manager
 menu item from theWindow menu
 of the toolbar or.

The left side of the Register 
Manager is a tree containing a
ll the registers defined for t
he program's language. If the
registers have been grouped in
to categories by the language,
 those registers will appear u
nder a folder with that group
name. Registers that break dow
n into smaller registers are m
arked with the
icon. These nodes can be furth
er opened to
reveal their component registe
rs. For example, EAX can be op
ened to show AX, which can the
n be opened to show AL
and AH. Registers that don't h
ave sub pieces use the
icon. The filter text field, l
ocated under the register tree
 can be
used to quickly find any regis
ter. As you begin to type the 
name of a register, the tree w
ill shrink eliminating any reg
isters
that don't contain the filter 
text.

The right side of the Registe
r Manager is a table that disp
lays ranges of addresses that 
have assigned values for which
ever
Register
Values
register is selected in the re
gister tree. Initially, the ta
ble only contains values that 
have been explicitly
associated
withPlugin
the 2/4
selected register and addresse
s. There is an option in the d
rop down menu that will cause 
the table to also show default
values for a register. Default
 values are assigned by the la
nguage and usually only apply 
to context registers.

Tool Buttons

Toggles whether or not to sele
ct the row in the currently se
lected register value table wh
ose address range
contains the current address o
f the cursor in the listing vi
ew. For example, in the Regist
er Manager image
show above, if the user clicks
 on any address between 804c12
 and 804c24, then the first ro
w of the table will
be selected if this action tog
gle is on.
Deletes the register value ass
ociations for all the selected
 ranges in the table.
Creates a selection in the bro
wser for all the address range
s selected in the register val
ues table.
Filters out all registers in t
he register tree that don't ha
ve any associated values (defa
ult or otherwise).

Menu Actions
Show Default Values - if selec
ted, the register manager will
 show default register value r
anges mixed in with
user set register value ranges
.
Editing an Address Value Range
Double click on any row in the
 register value table to bring
 up the Edit Register Value Ra
nge dialog.

Using the dialog, you can adju
st the start or end address an
d/or change the value associat
ed with the range. If
you change the start or end ad
dress such that the range is s
maller, then value association
s for address range that
was trucated is effectively cl
eared. For example, in the dia
log shown above, if you change
 the end address to
01001b47 and change the value 
to 111, then addresses 01001b3
3 to 01001b47 will have the va
lue 111 and
address 01001b48 will have no 
value.

Setting Register Values Over A
ddress Ranges

Setting Register Values Over 
Address Ranges
Register Values Plugin 3/4
To set a value for a register 
across an address range, first
 create a selection in the bro
wser and then invoke the Set R
egister
Values action by either using 
the right-mouse popup or using
 the <Ctrl>R quick key. The fo
llowing dialog appears.

Choose the register for which 
you want to set a value, enter
 the value and press the Ok bu
tton. The Address(es) field sh
ows
the set of addresses that will
 be affected. By default, the 
Value field is entered as an u
nsigned hex value, but the for
mat
can be changed using the adjac
ent drop-down menu.
If the browser cursor is on a 
register when this dialog is i
nvoked, then the register comb
o will be set to that register
.

Clearing Register Values Over 
Address Ranges
To clear a register value over
 an address range, first creat
e a selection in the browser a
nd then invoke the Clear Regis
ter
Values action by using the rig
ht-mouse popup. The following 
dialog appears.

Choose the register for the as
sociation and press the Ok but
ton. The Address(es) field sho
ws the set of addresses that w
ill
be affected.

Choose the register for the a
ssociation and press the Ok bu
tton. The Address(es) field sh
ows the set of addresses that 
will
be affected.
Register Values Plugin 4/4

Delete Exiting Register Value 
Ranges Associations
You can delete associated regi
ster values using Delete Regis
ter Value Range action when ov
er a Register Transition field
in the browser ("assume ESI = 
0x20".) Activating this action
 will remove the register asso
ciation over the entire range
associated with that "Assume" 
statement.

Provided by: RegisterPlugin

Bookmarks 1/4

Bookmarks

Bookmarks are used to flag add
resses of interest in a Progra
m. Each Bookmark consists of a
n address, a type, a name, a c
ategory (optional), and a desc
ription (optional). Bookmarks 
may
be organized using the categor
y field. Ghidra places various
 Bookmark icons in the Marker 
Margin of the Code Browser to 
indicate locations of defined 
bookmarks. The tooltip (shown
when the mouse hovers over the
 Bookmark icon in the Marker M
argin) shows the Bookmark's ty
pe and comment.
The type refers to how the boo
kmark was added. Ghidra suppli
es five types of bookmarks:
Bookmark Types
Type (icon)

How Bookmark is Added

Navigator Color

Note

Added via the Note Bookmark di
alog; Notes are intended to
be user-defined only.

Purple

Info

May be added by a plugin to ma
rk an address of interest.

Cyan

Analysis

Added during the Auto Analysis
 process. Indicates
automatic changes which have b
een made to the program
(e.g., code found, address tab
les, etc.).

Orange

Error

Added by the disassembler or A
uto Analysis process when
an unexpected condition is ide
ntified at a specific address
(e.g., bad instruction).

Red

Represents a custom Bookmark t
ype which was added by a
plugin not currently configure
d into the tool. A properly
designed plugin will assign a 
custom icon and color to its
custom type.

Unknown

Magenta

Ghidra also places a marker fo
r the bookmark in the Navigati
on Margin of the Code Browser.
 Clicking on the Navigation Ma
rgin causes the Code Browser t
o go to that address, and
centers it in the browser.
The following paragraphs descr
ibes the Bookmarks window, and
 how to add and remove bookmar
ks.

Add a Bookmark (in the CodeBro
wser)

To add a Note Bookmark,
1.
2.
3.
4.
5.
6.

Position the cursor at an addr
ess
Right-mouse-click in the Code 
Browser, select Bookmark
The Address field on the Note 
Bookmark dialog shows the loca
tion where the bookmark will b
e added
Enter a Category (optional) or
 choose an existing one from t
he combo box
Enter a Description (optional)
; if an end of line comment ex
ists at this address, then thi
s text becomes the default des
cription of the bookmark, as s
hown in the image above.
Click on the OK button.

When adding a bookmark with mu
ltiple selections in the Code 
Browser, the Bookmark Top of E
ach Selection checkbox is both
 enabled and selected by defau
lt. Leave the
checkbox selected to create a 
bookmark at the start of each 
address range in the selection
. Deselecting the checkbox wil
l cause the bookmark to be cre
ated at the cursor location.

Before Adding Bookmarks to Sel
ection

After Adding Bookmarks to Sele
ction

The following image depicts th
e Code Browser with Bookmarks.
 Notice the checkmarks in the 
Marker Margin on the left and 
the markers in the Navigation 
Margin on the right.

Bookmarks 2/4

Remove a Bookmark (in the Code
Browser)
To remove a bookmark,
1. Position the cursor on the 
address of the bookmark to be 
deleted
2. From the Marker Margin, rig
ht-mouse-click, select Delete 
Bookmark

<type>: <description>

Bookmarks Window
The Bookmarks window lists all
 of the bookmarks within a Pro
gram, including the bookmark t
ype, category, description, ad
dress, label, and code unit wh
ere the bookmark was
placed. Click on a Bookmark to
 navigate to the selected addr
ess in the Code Browser.

To display the Bookmarks windo
w, click the bookmark icon

in the Code Browser toolbar, o
r select the Window

Bookmarks option from the menu
.

Each of the columns may be sor
ted by clicking on the header.
 The sort graphic illustrates 
which column is being sorted o
n, and whether it is ascending
 (
) or descending (
In the image above, the Previe
w column is sorted in ascendin
g alphabetical order. By defau
lt, the bookmarks are sorted i
n ascending order by the Type 
column.

).

In the Bookmark table, only th
e Category and Description col
umns are editable. To edit ent
ries in these columns, double-
click on the appropriate cell 
and begin typing. Click
outside of the cell to apply t
he changes. When the Category 
column is being edited, it sho
ws a combo box, listing all of
 the categories. Choose an exi
sting category or enter a new
one. If a new category in ente
red, the combo box is updated.

The list of Bookmarks displaye
d can be filtered by clicking 
the Filter button
checkboxes in the Bookmark Fil
ter dialog.

in the toolbar of the Bookmark
 Window. The displayed bookmar
ks will correspond to the sele
cted

You may also filter the conte
nts of the bookmark table by u
sing the filter text field.

Bookmarks 3/4

The following describes the fe
atures available from the Book
marks window (Note: some of th
ese features are also availabl
e from inside the CodeBrowser)
:
Edit Category
1.
2.
3.
4.

Double click in a Category cel
l to display the cell editor.
Click on the down-arrow button
 in the cell editor to display
 the list of categories.
Select a category from the lis
t OR enter a new category in t
he cell editor.
Press the <Enter> key or click
 outside of the editor.

Edit Description
1. Double click on a Descripti
oncell to display the cell edi
tor.
2. Enter a new description.
3. Press the <Enter> key or cl
ick outside of the editor.

Change the Sort Order
Click on the desired column he
ader to change the sort order.
Navigate to a Bookmark
Click anywhere in the row to n
avigate to the bookmark.
Filter Bookmarks
1. Click the Filter
button in the local toolbar of
 the Bookmarks window to displ
ay the Bookmark Filter dialog.
2. Configure filter informatio
n.
3. Click on the OK button.

If you have turned off some of
 the filter types, then the fi
lter icon will show a checkmar
k (

).

You may save the settings of t
he bookmark filter dialog by s
aving the tool.
In addition to filtering on th
e type of bookmarks you may al
so filter the contents of the 
bookmark table by entering tex
t into the filter text field f
ound at the bottom of
the bookmark table. This filte
r will include only those Book
marks whose Category or Descri
ption contain the specified te
xt. For example, to show only 
the entry point
bookmarks, you would enter "en
try" in the filter field. The 
results would show only those 
bookmarks with a Category or D
escription containing the word
 "entry". The
text filter is not case sensit
ive, nor does it support regul
ar expressions.
Reorder Columns
Reorder columns in the Bookmar
ks window by dragging the colu
mn header to another position 
in the table.
Make Selection in the Code Bro
wser
1.
2.
3.
4.

Select one or more rows in the
 Bookmarks table.
Click the Select Bookmark Loca
tions
button in the local toolbar.
The corresponding addresses ar
e selected in the browser.
Navigate to the selected addre
ssed by using the navigation b
uttons (

,

) on the main tool bar.

Remove Bookmarks
1. Select one or more rows in 
the Bookmarks table.
2. Hit the <Delete> key, or pr
ess the
icon on the Bookmarks toolbar,
 or right mouse click and choo
se the Delete option.

Dismiss the Bookmarks Window
Click the Dismiss button to ex
it the Bookmarks window.

Provided by: Bookmarks Plugin
Related Topics:
Navigate on Selection
Marker Margin

Navigate on Selection
Marker Margin
Code Browser

Bookmarks 4/4

